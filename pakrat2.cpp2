read_le: (in bytes: *FILE, out result: _) -> void = {
    result = 0;  // FIXME: this has to be initialized before we can decltype it?
    shift: ulong = 0;
    while shift < sizeof(decltype(result)) next shift++ {
        result |= (bytes.fgetc() << (shift * 8));
    }
}

read_entry: (in bytes: *FILE) -> (name: std::string, position: u32, length: u32) = {
    buffer := std::array<char, 64>();
    fread(buffer.data(), 1, buffer.size(), bytes);
    name = buffer;
    read_le(bytes, out position);
    length = 0;
    return;
}


main: (args) -> int = {
    if (args.size() == 1) {
        stderr.fprintf("Usage: %.*s FILE\n", args[0].length(), args[0].data());
        return 1;
    }
    printf("PAKRat2 0.1\n");
    file_path: std::string = args[1];
    file := fopen(file_path.c_str(), "r");
    if (!file) {
        stderr.fprintf("Error opening '%.*s': %s\n", args[1].length(), args[1].data(), strerror(errno));
        return 1;
    }

    file.fseek(0, SEEK_END);
    file_size := file.ftell();
    printf("File is %ld Bytes.\n", file_size);
    file.fseek(0, SEEK_SET);

    count: u32;
    read_le(file, out count);
    printf("File contains %d entries.\n", count);
    entries := std::vector<decltype(read_entry(file))>();
    pos: u32 = 0;
    while pos < count next pos++ {
        x := file.read_entry();
        if (pos) {
            entries.back().length = x.position - entries.back().position;
            printf("%#010x %s (%d Bytes)\n", entries.back().position, entries.back().name.c_str(), entries.back().length);
        }
        entries.push_back(x);
    }
    entries.back().length = file_size - entries.back().position;
    printf("%#010x %s (%d Bytes)\n", entries.back().position, entries.back().name.c_str(), entries.back().length);

    for entries do :(entry:_) = {
        normalized_name := entry.name;
        std::replace(normalized_name.begin(), normalized_name.end(), '\\', '/');
        path := std::filesystem::path(normalized_name);
        file_name := path.filename();
        parent := path.parent_path();
        // Create parent folder(s) (if needed)
        if (!parent.empty() && !std::filesystem::exists(parent)) {
            printf("Creating directory '%s'.\n", parent.c_str());
            std::filesystem::create_directories(parent);
        }
        printf("Creating file '%s'\n", normalized_name.c_str());
        out_file := fopen(normalized_name.c_str(), "w");
        if (!out_file) {
            stderr.fprintf("Error creating file: %s\n", strerror(errno));
            continue;
        }

        file.fseek(entry.position, SEEK_SET);
        to_read: size_t = entry.length;
        while std::cmp_greater(to_read, 0) {
            buffer := std::array<char, 1024>();
            chunk := std::min(to_read, sizeof(buffer));
            to_read -= chunk;
            fread(buffer.data(), 1, chunk, file);
            fwrite(buffer.data(), 1, chunk, out_file);
        }
    }

    file.fclose();
}
