// #include <filesystem>
// #include <algorithm>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstring>
#include <cerrno>
#include <span>
#include <vector>
#include <tuple>
#include <cstdint>
#include <fmt/core.h>

struct prelude {
    uint32_t count;
    struct entry {
        char name[64];
        uint32_t offset;
    } entries[];
};

main: (args) -> int = {
    file_path: std::string = "";
    file_path = inspect args.argc -> std::string {
        is 2 = std::string(args.argv[1]);
        is _ = "GAME.PAK";
    };
    std::cout << ("PAKrat 0.2\n");


    file: std::ifstream = (file_path, std::fstream::in | std::fstream::binary);
    if (!file.is_open()) {
        std::cerr << "Error opening '" << file_path << "': " << std::strerror(errno) << "\n";
        return 1;
    }

    file.seekg(0, std::ifstream::end);
    file_size: uint32_t = static_cast<uint32_t>(file.tellg());
    std::cout << "File '" << file_path << "' size: " << file_size << " Bytes\n";
    file.seekg(0, std::ifstream::beg);

    // Let's start by getting the number of entries, so we know how large a buffer to allocate
    count: uint32_t = 0;
    file.read(reinterpret_cast<*char>(count&), sizeof(uint32_t));
    std::cout << "File contains " << count << " entries:\n";

    // Reallocate to the appropriate size.
    storage := std::vector<char>(sizeof(prelude) + count * sizeof(prelude::entry));
    header: _ = reinterpret_cast<*prelude>(storage.data());
    buffer: *char = reinterpret_cast<*char>(header*.entries);
    file.read(buffer, sizeof(prelude::entry) * count);

    // Interpret by casting to a prelude, gather, then print all the files and their offsets.
    header*.count = count;

    entries := std::vector<std::tuple<std::string, uint32_t, uint32_t>>();
    view := std::span(header*.entries + 1, count - 1);
    it := view.begin() + 1;
    for view next it++ do :(entry:_) = {
        prev := (it - 1)*;
        cur := it*;
        std::cout << prev.name << '\n';
        entries.push_back(std::make_tuple(std::string(prev.name), prev.offset, cur.offset - prev.offset));
    }

    last := header*.entries[header*.count - 1];
    std::cout << "x" << std::endl;
    entries.push_back(std::make_tuple(last.name, last.offset, file_size - last.offset));

    for entries do :(entry:_) = {
        std::cout << fmt::format("{:#010x} `{}` ({} Bytes)\n",std::get<1>(entry), std::get<0>(entry), std::get<2>(entry));
    }
}
